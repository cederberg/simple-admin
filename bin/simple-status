#!/usr/bin/env bash
#
# Checks and prints the machine and process status.
#
# Syntax: simple-status
#
# Files:
#   /etc/simple-status.conf
#

# Configuration variables
CONFIG=/etc/simple-status.conf
LOCALDIR=`dirname $0`/..
SHORT="false"

# Set caution flags
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

# Setup color codes
case $TERM in
    *color)
        COLOR_OFF=`echo -en '\033[0m'`
        COLOR_OK=`echo -en '\033[32m'`
        COLOR_ERR=`echo -en '\033[1;31m'`
        ;;
    *)
        COLOR_OFF=''
        COLOR_OK=''
        COLOR_ERR=''
        ;;
esac

# Function for logging a warning to stderr without exiting
warn() {
    echo "${COLOR_ERR}WARNING:${COLOR_OFF}" "$*" >&2
}

# Function for logging an error to stderr and exiting
fail() {
    echo "${COLOR_ERR}ERROR:${COLOR_OFF}" "$*" >&2
    exit 1
}

# Function for printing CPU load average
cpustatus() {
    CPU_COUNT=`grep --count processor /proc/cpuinfo`
    LOAD_AVG=`cat /proc/loadavg | awk '{print $1, $2, $3}'`
    FMT="loadavg:   %s, %s, %s       -- %s processors\n"
    printf "$FMT" $LOAD_AVG $CPU_COUNT
}

# Function for printing memory status
memstatus() {
    TMPFILE=/tmp/simple-status.vars
    sed -e 's/^\(\w*\):\s*\(\S*\).*/\1="\2"/g;t;d' /proc/meminfo > $TMPFILE
    . $TMPFILE
    rm $TMPFILE
    FREE=`echo ${MemFree:-0} | awk '{print int($1 / 1024 + 0.5)}'`
    FREE_PERCENT=`echo ${MemFree:-0} ${MemTotal:-0} | awk '{OFMT="%.1f" ; print $1 * 100 / $2}'`
    CACHE=`echo ${Buffers:-0} ${Cached:-0} | awk '{print int(($1 + $2) / 1024 + 0.5)}'`
    RSS=`echo ${MemFree:-0} ${Buffers:-0} ${Cached:-0} ${MemTotal:-0} | awk '{print int(($4 - $1 - $2 - $3) / 1024 + 0.5)}'`
    SWAP=`echo ${SwapFree:-0} ${SwapTotal:-0} | awk '{print int(($2 - $1) / 1024 + 0.5)}'`
    TOTAL=`echo ${MemTotal:-0} | awk '{print int($1 / 1024 + 0.5)}'`
    INFO=`printf "%s MB (%s%%) free" $FREE $FREE_PERCENT`
    DETAILS=`printf "%s rss, %s cache, %s swap, %s total (MB)" $RSS $CACHE $SWAP $TOTAL`
    printf "memory:    %-22s -- %s\n" "$INFO" "$DETAILS"
}

# Function for printing storage status
storagestatus() {
    df -k / | tail -n +2 | while read DEVICE TOTALK USEDK FREEK USEDPERCENT MOUNT ; do
        TOTAL=`echo $TOTALK | awk '{OFMT="%.1f" ; print $1 / 1048576}'`
        USED=`echo $USEDK | awk '{OFMT="%.1f" ; print $1 / 1048576}'`
        FREE=`echo $FREEK | awk '{OFMT="%.1f" ; print $1 / 1048576}'`
        FREE_PERCENT=`echo $FREEK $TOTALK | awk '{OFMT="%.1f" ; print $1 * 100 / $2}'`
        INFO=`printf "%s GB (%s%%) free" $FREE $FREE_PERCENT`
        DETAILS=`printf "%s GB used, %s GB total on %s" $USED $TOTAL $DEVICE`
        if [ $TOTALK -ge 1048576 ] ; then
            printf "storage:   %-22s -- %s\n" "$INFO" "$DETAILS"
        fi
    done
}

# Function for printing a group of related PIDs
procids() {
    PID=$1
    printf "$PID "
    for CHILD in `ps --ppid $PID -o pid --no-headers` ; do
        procids $CHILD
    done
}

# Function for printing process status
procstatus() {
    TMPFILE=/tmp/simple-status.vars
    ps --format "pid,rss,comm" --no-headers `procids $1` > $TMPFILE
    exec < $TMPFILE
    TOTAL_RSS=0
    TOTAL_SWAP=0
    while read ID RSS CMD ; do
        SWAP=`grep VmSwap /proc/$ID/status | tr -cd '[:digit:]'` || true
        TOTAL_RSS=$((TOTAL_RSS + RSS))
        TOTAL_SWAP=$((TOTAL_SWAP + SWAP))
    done
    rm -f $TMPFILE
    PID=$1
    RSS=`echo $TOTAL_RSS | awk '{OFMT="%.1f" ; print $1 / 1024}'`
    SWAP=`echo $TOTAL_SWAP | awk '{OFMT="%.0f" ; print $1 / 1024}'`
    printf "pid: %5s,  rss: %6s MB,  swap: %3s MB" $PID $RSS $SWAP
}

# Function for printing service status
servicestatus() {
    NAME=$1
    PIDFILE=${2:--}
    MATCH=${3:-${NAME}}
    STATUS=99
    if [ -f "$PIDFILE" ] ; then
        PID=`cat $PIDFILE | awk '{print $1}'`
        if ps -p ${PID:-0} > /dev/null ; then
            STATUS=0
            DETAILS=`procstatus $PID`
        fi
    elif [ "$PIDFILE" == "-" ] ; then
        PID=`ps --ppid 1 -o pid,args | grep $MATCH | awk '{print $1}'`
        if [ ${PID:-0} -ne 0 ] ; then
            STATUS=0
            DETAILS=`procstatus $PID`
        fi
    fi
    if [ $STATUS -ne 0 ] ; then
        if ps --ppid 1 -o pid,args | grep $MATCH > /dev/null ; then
            STATUS=1
            DETAILS="invalid PID file $PIDFILE, process exists"
        else
            STATUS=2
            DETAILS="service not running"
        fi
    fi
    if [ $STATUS -eq 0 ] ; then
        FMT="$COLOR_OK[OK]$COLOR_OFF %-28s -- %s\n"
    else
        FMT="$COLOR_ERR[ERROR] %-25s -- %s$COLOR_OFF\n"
    fi
    printf "$FMT" "$NAME" "$DETAILS"
    return $STATUS
}

# Load config to stdin
if [ -f $CONFIG ] ; then
    exec < $CONFIG
elif [ -f $LOCALDIR/$CONFIG ] ; then
    exec < $LOCALDIR/$CONFIG
else
    fail "Missing config file $CONFIG"
fi

# Parse command-line arguments
if [ "${1:-}" == "-s" ] ; then
    shift
    SHORT="true"
fi

# System statistics
cpustatus
memstatus
storagestatus

# Checking all services
RETVAL=0
while [ $SHORT = "false" ] && read NAME PIDFILE MATCH ; do
    [ "$NAME" != "" -a "${NAME:0:1}" != "#" ] || continue
    if ! servicestatus $NAME $PIDFILE $MATCH; then
        RETVAL=`expr $RETVAL + 1`
    fi
done

# Check for running simple-restart
LOCKFILE=/tmp/simple-restart.pid
if [ -f $LOCKFILE ] ; then
    PID=`cat $LOCKFILE`
    if ps -o pid,args --pid $PID > /dev/null ; then
        warn "simple-restart (pid: $PID) is running"
    fi
fi

exit $RETVAL
