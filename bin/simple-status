#!/usr/bin/env bash
#
# Checks and prints the machine and process status.
#
# Syntax: simple-status
#
# Files:
#   /etc/simple-status.conf
#

# Configuration variables
CONFIG=/etc/simple-status.conf
LOCALDIR=`dirname $0`/..
DETAIL="full"

# Set caution flags
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

# Setup color codes
COLOR_OFF=`tput sgr0`
COLOR_OK=`tput setaf 2`
COLOR_WARN=`tput setaf 3`
COLOR_ERR=`tput setaf 1; tput bold`

# Function for logging a warning to stderr without exiting
warn() {
    echo "${COLOR_ERR}WARNING:${COLOR_OFF}" "$@" >&2
}

# Function for logging an error to stderr and exiting
fail() {
    echo "${COLOR_ERR}ERROR:${COLOR_OFF}" "$@" >&2
    exit 1
}

# Function for printing CPU load average
cpustatus() {
    local CPU_COUNT=`grep --count processor /proc/cpuinfo`
    local LOAD_AVG=`awk '{print $1, $2, $3}' /proc/loadavg`
    local FMT="loadavg:  %s, %s, %s       -- %s processors\n"
    printf "$FMT" $LOAD_AVG $CPU_COUNT
}

# Function for printing memory status
memstatus() {
    local TMPFILE=/tmp/simple-status.vars
    sed -e 's/^\(\w*\):\s*\(\S*\).*/\1="\2"/g;t;d' /proc/meminfo > $TMPFILE
    . $TMPFILE
    rm $TMPFILE
    local FREE=$(( (${MemFree:-0} + 512) / 1024 ))
    local FREE_PERCENT=`echo ${MemFree:-0} ${MemTotal:-0} | awk '{OFMT="%.1f" ; print $1 * 100 / $2}'`
    local CACHE=$(( (${Buffers:-0} + ${Cached:-0} + 512) / 1024 ))
    local RSS=$(( (${MemTotal:-0} - ${MemFree:-0} - ${Buffers:-0} - ${Cached:-0} + 512) / 1024 ))
    local SWAP=$(( (${SwapTotal:-0} - ${SwapFree:-0} + 512) / 1024 ))
    local TOTAL=$(( (${MemTotal:-0} + 512) / 1024 ))
    local INFO="$FREE MB ($FREE_PERCENT%) free"
    local DETAILS="$RSS rss, $CACHE cache, $SWAP swap, $TOTAL total (MB)"
    printf "memory:   %-22s -- %s\n" "$INFO" "$DETAILS"
}

# Function for printing storage status
storagestatus() {
    df -k / | tail -n +2 | while read DEVICE TOTALK USEDK FREEK USEDPERCENT MOUNT ; do
        local TOTAL=`echo $TOTALK | awk '{OFMT="%.1f" ; print $1 / 1048576}'`
        local USED=`echo $USEDK | awk '{OFMT="%.1f" ; print $1 / 1048576}'`
        local FREE=`echo $FREEK | awk '{OFMT="%.1f" ; print $1 / 1048576}'`
        local FREE_PERCENT=`echo $FREEK $TOTALK | awk '{OFMT="%.1f" ; print $1 * 100 / $2}'`
        local INFO="$FREE GB ($FREE_PERCENT%) free"
        local DETAILS="$USED GB used, $TOTAL GB total on $DEVICE"
        if [ $TOTALK -ge 1048576 ] ; then
            printf "storage:  %-22s -- %s\n" "$INFO" "$DETAILS"
        fi
    done
}

procparents() {
    local TMPFILE=/tmp/simple-status.ps
    local FILES=""
    ps -eo pid,ppid,thcount,rss,user,group,cmd > $TMPFILE
    while read ID PARENT THCNT RSS USER GROUP CMD ; do
        if [ $ID != "2" ] && [ $PARENT != "2" ] && [ -e /proc/$ID/status ] ; then
            eval "PID_${ID}=1"
            eval "PID_${ID}_PARENT='${PARENT}'"
            eval "PID_${ID}_THCNT='${THCNT}'"
            eval "PID_${ID}_RSS='${RSS}'"
            eval "PID_${ID}_USER='${USER}'"
            eval "PID_${ID}_GROUP='${GROUP}'"
            eval "PID_${ID}_CMD='${CMD}'"
            local VAR="PID_${PARENT}_CHILDREN"
            eval "${VAR}='${!VAR:-} $ID'"
            local FILES="$FILES /proc/$ID/status"
        fi
    done < $TMPFILE
    grep VmSwap $FILES | sed -e 's|/proc/||;s|/status:VmSwap:\s\+| |' > $TMPFILE
    while read ID SWAP UNIT ; do
        eval "PID_${ID}_SWAP='${SWAP}'"
    done < $TMPFILE
    rm -rf $TMPFILE
}

# Function for printing a group of related PIDs
procids() {
    local PIDS="$@"
    echo -n ${PIDS} " "
    for ID in ${PIDS} ; do
        local VAR="PID_${ID}_CHILDREN"
        [ "${!VAR:-}" != "" ] && procids ${!VAR:-}
    done
}

# Function for printing process status
procdetails() {
    local PIDS=`procids $1`
    local TOTAL_RSS=0
    local TOTAL_SWAP=0
    for ID in $PIDS ; do
        local VAR="PID_${ID}_RSS"
        local RSS=${!VAR:-0}
        local VAR="PID_${ID}_SWAP"
        local SWAP=${!VAR:-0}
        local TOTAL_RSS=$((TOTAL_RSS + RSS))
        local TOTAL_SWAP=$((TOTAL_SWAP + SWAP))
    done
    local PID=$1
    local RSS=`echo $TOTAL_RSS | awk '{OFMT="%.1f" ; print $1 / 1024}'`
    local SWAP=`echo $TOTAL_SWAP | awk '{OFMT="%.0f" ; print $1 / 1024}'`
    printf "pid: %5s,  rss: %7s MB,  swap: %3s MB" $PID $RSS $SWAP
}

# Function to locate the PID for a named service
servicepid() {
    local NAME=$1
    local PIDFILE=${2:--}
    local MATCH=${3:-${NAME}}
    if [ -r "$PIDFILE" ] && PID=$(<"$PIDFILE") && VAR="PID_${PID}" && [ "${!VAR:-}" == "1" ] ; then
        true
    elif PID=`ps --ppid 1 -o pid,comm | grep " $MATCH" | head -n 1 | awk '{print $1}'` ; then
        true
    elif PID=`ps --ppid 1 -o pid,args | grep "$MATCH" | head -n 1 | awk '{print $1}'` ; then
        true
    else
        PID=
    fi
}

# Function for printing service status
servicestatus() {
    local PID=${1:-}
    local NAME=${2:-}
    local PIDFILE=${3:--}
    if [ "$PID" == "" ] ; then
        local STATUS=1
        local DETAILS="service not running"
    elif [ $PIDFILE == "-" ] ; then
        local STATUS=0
        local DETAILS=`procdetails $PID`
    elif [ ! -r "$PIDFILE" ] ; then
        local STATUS=2
        local DETAILS="no PID file $PIDFILE, pid $PID found"
    elif [ $PID != "`cat $PIDFILE | awk '{print $1}'`" ] ; then
        local STATUS=3
        local DETAILS="invalid PID file $PIDFILE, pid $PID found"
    else
        local STATUS=0
        local DETAILS=`procdetails $PID`
    fi
    if [ $STATUS -eq 0 -a "$NAME" != "" ] ; then
        local FMT="$COLOR_OK[OK]$COLOR_OFF %-27s -- %s\n"
    elif [ $STATUS -eq 0 ] ; then
        local FMT="$COLOR_WARN[??]$COLOR_OFF %-27s -- %s\n"
        local NAME=`ps -p $PID -o comm --no-headers | awk '{print $1}'`
    else
        local FMT="$COLOR_ERR[ERROR] %-24s -- %s$COLOR_OFF\n"
    fi
    printf "$FMT" "$NAME" "$DETAILS"
    return $STATUS
}

# Load config to stdin
if [ -f $CONFIG ] ; then
    exec < $CONFIG
elif [ -f $LOCALDIR/$CONFIG ] ; then
    exec < $LOCALDIR/$CONFIG
else
    fail "Missing config file $CONFIG"
fi

# Parse command-line arguments
if [ "${1:-}" == "-s" ] ; then
    shift
    DETAIL="short"
elif [ "${1:-}" == "-m" ] ; then
    shift
    DETAIL="medium"
fi

# System statistics
cpustatus
memstatus
storagestatus
procparents

# Checking configured services
RETVAL=0
while [ $DETAIL != "short" ] && read NAME PIDFILE MATCH ; do
    [ "$NAME" != "" -a "${NAME:0:1}" != "#" ] || continue
    servicepid $NAME $PIDFILE $MATCH
    if ! servicestatus "$PID" $NAME $PIDFILE ; then
        RETVAL=$((RETVAL + 1))
    fi
    if [ "$PID" != "" ] ; then
        VAR="PID_${PID}_PARENT"
        PARENT=${!VAR:-}
        declare "FOUND_$PID=1"
        declare "FOUND_$PARENT=1"
    fi
done

# Checking unconfigured services
if [ $DETAIL = "full" ] ; then
    for PID in `ps --ppid 1 -o pid --no-headers` ; do
        VAR="FOUND_$PID"
        if [ "${!VAR:-}" == "" ] ; then
            servicestatus $PID
        fi
    done
fi

# Check for running simple-restart
LOCKFILE=/tmp/simple-restart.pid
if [ -f $LOCKFILE ] ; then
    PID=`cat $LOCKFILE`
    if ps -o pid,args --pid $PID > /dev/null ; then
        warn "simple-restart (pid: $PID) is running"
    fi
fi

exit $RETVAL
