#!/usr/bin/env bash
#
# Restarts a group of services in a predefined order.
#
# Syntax: simple-restart [-m] [-q] <groupname>
#
# Files:
#   /etc/simple-restart.conf
#

# Configuration variables
PROCID="simple-restart[$$]"
CONFIG=/etc/simple-restart.conf
LOCALDIR=`dirname $0`/..
HOST=`hostname`
SENDMAIL=/usr/sbin/sendmail
MAIL="false"
VERBOSE="true"

# Set caution flags
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

# Setup color codes
COLOR_OFF=`tput sgr0`
COLOR_OK=`tput setaf 2`
COLOR_ERR=`tput setaf 1; tput bold`

# Function for logging a warning to stderr without exiting
warn() {
    echo "${COLOR_ERR}WARNING:${COLOR_OFF}" "$@" >&2
    logger -p local0.warning -t "$PROCID" "$@" || true
}

# Function for logging an error to stderr and exiting
fail() {
    echo "${COLOR_ERR}ERROR:${COLOR_OFF}" "$@" >&2
    logger -p local0.error -t "$PROCID" "$@" || true
    exit 1
}

# Function for logging information in verbose mode
log() {
    [ "$VERBOSE" == "true" ] && echo `date +"%F %T"`: "$@" || true
    logger -p local0.info -t "$PROCID" "$@" || true
}

# Function for printing command-line usage info
usage() {
    echo "Restarts a group of services in a predefined order."
    echo
    echo "Syntax: simple-restart [-m] [-q] <group>"
    echo
    echo "Options:"
    echo "  -m       -- E-mail output to root@localhost."
    echo "  -q       -- Quiet mode (prints no output)."
    echo
    echo "Groups:"
    for VAR in $(compgen -A variable group_) ; do
        local NAME=${VAR#group_}
        local DESC=${!VAR}
        printf "  %-8s -- %s\n" $NAME "$DESC"
    done
    exit 1
}

# Function for finding the PID from a service name (single PID returned)
findprocess() {
    local NAME=$1
    local PID=""
    local PIDFILE=`find /var/run/ -type f -iregex ".*/${NAME}d?.pid"`
    if [ -r "$PIDFILE" ] && PID=$(<"$PIDFILE") && [ -d "/proc/$PID" ] ; then
        echo $PID
        return 0
    fi
    pgrep -o $NAME || pgrep -o -f $NAME
}

# Function for waiting for a process to die
waitprocess() {
    local WAIT=$1
    shift
    local PIDS="$@"
    local SECS=0
    while [ $SECS -lt "$WAIT" ] && ps $PIDS > /dev/null ; do
        let ++SECS
        sleep 1
    done
}

# Function for starting a named service
start() {
    local NAME=$1
    local WAIT=${2:-}
    log "starting service $NAME..."
    service $NAME start > /dev/null || fail "failed to start $NAME"
    if [ "$WAIT" != "" ] ; then
        sleep $WAIT
    fi
    PID=`findprocess $NAME` || fail "no PID found for $NAME, aborting"
    ps --pid $PID > /dev/null || fail "$NAME (pid: $PID) not started, aborting" 
    log "service $NAME (pid: $PID) started"
}

# Function for stopping a named service
stop() {
    NAME=$1
    WAIT=${2:-}
    FORCE=${3:-}
    PID=`findprocess $NAME` || true
    log "stopping service $NAME (pid: $PID)..."
    service $NAME stop > /dev/null || true
    if [ "$WAIT" != "" -a "$PID" != "" ] ; then
        waitprocess $WAIT $PID
        if [ "$FORCE" != "" ] && ps --pid $PID > /dev/null ; then
            warn "sending TERM signal to $NAME (pid: $PID)..."
            kill -TERM $PID
            waitprocess $WAIT $PID
        fi
        if [ "$FORCE" != "" ] && ps --pid $PID > /dev/null ; then
            warn "sending KILL signal to $NAME (pid: $PID)..."
            kill -KILL $PID
            waitprocess $WAIT $PID
        fi
        if ps --pid $PID > /dev/null ; then
            fail "failed to kill process $NAME (pid: $PID), aborting"
        fi
    fi
    log "service $NAME (pid: $PID) stopped"
}

# Check for root user
[ `whoami` == 'root' ] || fail "only root is allowed to run simple-restart"

# Load config (shell)
if [ -f $CONFIG ] ; then
    . $CONFIG
elif [ -f $LOCALDIR/$CONFIG ] ; then
    . $LOCALDIR/$CONFIG
else
    fail "missing config file $CONFIG"
fi

# Parse command-line arguments
if [ "${1:-}" == "-m" ] ; then
    shift
    MAIL="true"
fi
if [ "${1:-}" == "-q" ] ; then
    shift
    VERBOSE="false"
fi
if [ -z "${1:-}" ] ; then
    usage
fi
GROUP=$1

# Check for valid group name
START=start_$GROUP
STOP=stop_$GROUP
compgen -A function $START > /dev/null || fail "no function $START in $CONFIG"
compgen -A function $STOP > /dev/null || fail "no function $STOP in $CONFIG"

# Check if already running
LOCKFILE=/tmp/simple-restart.pid
if [ -f $LOCKFILE ] ; then
    PID=`cat $LOCKFILE`
    if ps -o pid,args --pid $PID > /dev/null ; then
        fail "simple-restart (pid: $PID) is already running"
    fi
fi
printf $$ > $LOCKFILE

# Restart services
if [ $MAIL == "true" ] ; then
    COLOR_OFF=''
    COLOR_OK=''
    COLOR_ERR=''
    (
        printf "To: root\n" ;
        printf "Subject: simple-restart $GROUP ($HOST `date +'%F %T'`)\n\n" ;
        ( $STOP ; $START ) || true
    ) 2>&1 | $SENDMAIL root
else
    $STOP
    $START
fi
rm -f $LOCKFILE
