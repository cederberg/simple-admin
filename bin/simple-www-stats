#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename;
use Geo::IPfree;
use JSON::XS;
use Text::Glob;
$Text::Glob::strict_leading_dot = undef;
$Text::Glob::strict_wildcard_slash = undef;

# HTTP request log parser
{
    package Parser;

    sub new {
        my ($proto) = @_;
        my $class = ref($proto) || $proto;
        my $self = {};
        bless ($self, $class);
        return $self;
    }

    sub Reset {
        my ($self) = @_;
        undef $self->{REQUEST};
        undef $self->{TIME};
        undef $self->{IP};
        undef $self->{HOST};
        undef $self->{CODE};
        undef $self->{BYTES};
        undef $self->{REFERRER};
        undef $self->{AGENT};
        undef $self->{DELAY};
        undef $self->{CACHE};
        undef $self->{BACKEND};
    }

    sub _Init {
        my ($self, @parts) = @_;
        for my $i (0 .. $#parts) {
            my $part = $parts[$i];
            if (!defined($self->{REQUEST}) and $part =~ /^[A-Z]{3,10} \/.* HTTP\/1.[01]/) {
                $self->{REQUEST} = $i;
            } elsif (!defined($self->{TIME}) and $part =~ /^[0-3]?\d\/\w\w\w\/20\d\d:[0-2]\d:[0-5]\d:[0-5]\d /) {
                $self->{TIME} = $i;
            } elsif (!defined($self->{IP}) and $part =~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/) {
                $self->{IP} = $i;
            } elsif (!defined($self->{HOST}) and $part =~ /^([a-z0-9_-]+\.){2,}[a-z]{2,6}$/) {
                $self->{HOST} = $i;
            } elsif (!defined($self->{CODE}) and $part =~ /^[1-5]\d\d$/) {
                $self->{CODE} = $i;
            } elsif (!defined($self->{BYTES}) and $part =~ /^\d+$/) {
                $self->{BYTES} = $i;
            } elsif (!defined($self->{REFERRER}) and $part =~ /^https?:/) {
                $self->{REFERRER} = $i;
            } elsif (!defined($self->{AGENT}) and $part =~ /Mozilla|bot|crawler|spider/i) {
                $self->{AGENT} = $i;
            } elsif (!defined($self->{DELAY}) and $part =~ /^t(ime)?:/) {
                $self->{DELAY} = $i;
            } elsif (!defined($self->{CACHE}) and $part =~ /^c(ache)?:/) {
                $self->{CACHE} = $i;
            } elsif (!defined($self->{BACKEND}) and $part =~ /^(b|backend|u|upstream):/) {
                $self->{BACKEND} = $i;
            }
        }
    }

    sub Parse {
        my ($self, $line) = @_;
        my @parts = $line =~ /"[^"]*"|\[[^\]]*\]|[^\s]+/g;
        foreach (@parts) {
            s/^"(.*)"$/$1/;
            s/^\[(.*)\]$/$1/;
        }
        if (!defined($self->{REQUEST}) || !defined($self->{HOST}) || !defined($self->{REFERRER})) {
            $self->_Init(@parts);
        }
        my $request = defined($self->{REQUEST}) ? $parts[$self->{REQUEST}] : "";
        my ($method, $path, $version) = ($request =~ /^(\S+) (.*?) (HTTP\/.*)/);
        if (!defined($method)) {
            $method = '<Invalid>';
            $path = '';
            $version = '<Invalid>';
        }
        my $time = defined($self->{TIME}) ? $parts[$self->{TIME}] : "";
        my $ip = defined($self->{IP}) ? $parts[$self->{IP}] : "";
        $ip =~ s/^(0:0:0:0:0|:)(:FFFF:|:0:|:)((\d{1,3}\.){3}\d{1,3})$/$3/i;
        my $host = defined($self->{HOST}) ? $parts[$self->{HOST}] : "";
        my $code = defined($self->{CODE}) ? $parts[$self->{CODE}] : "";
        my $bytes = defined($self->{BYTES}) ? $parts[$self->{BYTES}] : "";
        my $referrer = defined($self->{REFERRER}) ? $parts[$self->{REFERRER}] : "-";
        my $agent = defined($self->{AGENT}) ? $parts[$self->{AGENT}] : "-";
        my $delay = defined($self->{DELAY}) ? $parts[$self->{DELAY}] : "0";
        $delay =~ s/^t(ime)?://;
        my $cache = defined($self->{CACHE}) ? $parts[$self->{CACHE}] : "-";
        $cache =~ s/^c(ache)?://;
        my $backend = defined($self->{BACKEND}) ? $parts[$self->{BACKEND}] : "-";
        $backend =~ s/^(b|backend|u|upstream)://;
        return (
            METHOD => $method,
            PATH => $path,
            HTTP => $version,
            DATETIME => $time,
            IP => $ip,
            HOST => $host,
            CODE => $code,
            BYTES => $bytes,
            REFERRER => $referrer,
            AGENT => $agent,
            DELAY => $delay,
            CACHE => $cache,
            BACKEND => $backend
        );
    }
}

# Global variables
my $total = 0;
my $totaltime = 0.0;
my $totalkb = 1;
my @conf_errors = ();
my %timeofday = ();
my %prcstime = ();
my %stat_top_count = ();
my %stat_top_time = ();
my %stat_top_download = ();
my %stat_source = ();
my %stat_host = ();
my %stat_host_time = ();
my %stat_host_download = ();
my %stat_country = ();
my %stat_timeofday = ();
my %stat_prcstime = ();
my %stat_httpmethod = ();
my %stat_httpversion = ();
my %stat_httpcode = ();
my %stat_useragent = ();
my %stat_errortype = ();
my $parser = Parser->new;
my $geo = Geo::IPfree->new;
$geo->Faster;
$geo->{cache} = 1;

# Percent calculation (safe from div-by-zero)
sub percent {
    my ($value, $total) = @_;
    if ($value <= 0 or $total <= 0) {
        return 0;
    } else {
        return $value * 100.0 / $total;
    }
}

# Format a number of KB (data size)
sub format_kb {
    my ($kb) = @_;
    if ($kb < 1024) {
        return sprintf("%d KB", $kb);
    } elsif ($kb < 1024 * 1024) {
        return sprintf("%.2f MB", $kb / 1024);
    } else {
        return sprintf("%.2f GB", $kb / (1024 * 1024));
    }
}

# Format a number of seconds (time)
sub format_secs {
    my ($secs) = @_;
    if ($secs < 60) {
        return sprintf("%.1f sec", $secs);
    } elsif ($secs < 3600) {
        return sprintf("%.1f min", $secs / 60);
    } else {
        return sprintf("%.1f hrs", $secs / 3600);
    }
}

# Print a formatted histogram
sub print_histogram {
    my ($handle, $hashref, $width, $max) = @_;
    my @sorted = reverse sort {$$hashref{$a} <=> $$hashref{$b}} keys %$hashref;
    my $fmt = sprintf("  %%-%ds %s\n", $width || 15, "%7d (%4.1f%%) requests");
    if (defined($max) and @sorted > $max) {
        $#sorted = $max - 1;
    }
    foreach my $key (@sorted) {
        my $count = $$hashref{$key};
        printf $handle $fmt, $key.':', $count, percent($count, $total);
    }
}

# Print a formatted time histogram
sub print_histogram_time {
    my ($handle, $hashref, $width, $max) = @_;
    my @sorted = reverse sort {$$hashref{$a} <=> $$hashref{$b}} keys %$hashref;
    my $fmt = sprintf("  %%-%ds %s\n", $width || 15, "%10s (%4.1f%%)");
    if (defined($max) and @sorted > $max) {
        $#sorted = $max - 1;
    }
    foreach my $key (@sorted) {
        my $count = $$hashref{$key};
        printf $handle $fmt, $key.':', format_secs($count), percent($count, $totaltime);
    }
}

# Print a formatted data size histogram
sub print_histogram_kb {
    my ($handle, $hashref, $width, $max) = @_;
    my @sorted = reverse sort {$$hashref{$a} <=> $$hashref{$b}} keys %$hashref;
    my $fmt = sprintf("  %%-%ds %s\n", $width || 15, "%10s (%4.1f%%)");
    if (defined($max) and @sorted > $max) {
        $#sorted = $max - 1;
    }
    foreach my $key (@sorted) {
        my $count = $$hashref{$key};
        printf $handle $fmt, $key.':', format_kb($count), percent($count, $totalkb);
    }
}

# Normalize HTTP browser & platform OS
sub normalize_browser_platform {
    my ($ref_data) = @_;
    my $agent = $$ref_data{'AGENT'};
    if ($agent =~ m#(Chrome|Firefox|MSIE|Opera)[/ ](\d+)#i) {
        $$ref_data{'BROWSER'} = $1;
        $$ref_data{'BROWSER_VERSION'} = $2;
    } elsif ($agent =~ /(Safari)/i or $agent =~ /(WebKit)/i) {
        $$ref_data{'BROWSER'} = $1;
        if ($agent =~ m#Version/(\d+)#i) {
            $$ref_data{'BROWSER_VERSION'} = $1;
        }
    } elsif ($agent =~ /Trident/i) {
        $$ref_data{'BROWSER'} = 'MSIE';
        if ($agent =~ m/rv:(\d+)/i) {
            $$ref_data{'BROWSER_VERSION'} = $1;
        }
    } elsif ($agent =~ /Bing|Facebook|Google|NING|Pinterest|Yahoo/i or
             $agent =~ /curl|Java|PubSub|Reeder|wget/i or
             $agent =~ /bot|crawler|fetch|proxy|search|spider|swarm/i or
             $agent =~ /archive|check|link|monitor|policy|subscribe|valid/i or
             $agent =~ /^Mozilla\/4\.0 \(compatible;\)$/ or
             $agent =~ /^-?$/) {
        $$ref_data{'BROWSER'} = 'Bot-like';
    } else {
        $$ref_data{'BROWSER'} = 'Other';
    }
    if ($agent =~ /Android/i) {
        $$ref_data{'OS'} = 'Android';
    } elsif ($agent =~ /iPhone|iPod|iPad|iOS/i) {
        $$ref_data{'OS'} = 'iOS';
    } elsif ($agent =~ /Mac/i) {
        $$ref_data{'OS'} = 'Mac';
    } elsif ($agent =~ /Linux/i) {
        $$ref_data{'OS'} = 'Linux';
    } elsif ($agent =~ /Win/i) {
        $$ref_data{'OS'} = 'Windows';
    } else {
        $$ref_data{'OS'} = 'Other';
    }
}

# Normalize error message
sub normalize_error_msg {
    my ($respcode, $host, $url) = @_;
    if ($respcode eq '400') {
        return 'bad request syntax';
    } elsif ($respcode eq '403' or $respcode eq '405') {
        return 'bot probe (WebDAV)';
    } elsif ($respcode eq '408') {
        return 'timeout waiting for request';
    } elsif ($respcode eq '499') {
        return 'client closed connection';
    } elsif ($host eq '<blank>') {
        return '<blank host>';
    }
    for (my $i = 0; $i < $#conf_errors; $i++) {
        my $re = $conf_errors[$i][0];
        my $msg = $conf_errors[$i][1];
        if ($url =~ /$re/i) {
            return $msg;
        }
    }
    return $host.$url;
}

# Processes an HTTP log file line
sub process_line {
    my ($line) = @_;
    $total++;
    my %data = $parser->Parse($line);
    normalize_browser_platform(\%data);
    my $hour = $data{'DATETIME'};
    $hour =~ s/^.*?\d{4}:(\d{2}):.*/$1/;
    $timeofday{''.(int($hour) / 3)}++;
    my $host = $data{'HOST'} || '<blank>';
    $stat_host{$host}++;
    my $ip = $data{'IP'};
    if ($ip =~ /^[\d\.]+$/) {
        my ($ipcode, $ipcountry) = $geo->LookUp($ip);
        $stat_country{$ipcountry || $ipcode}++;
    } elsif ($ip ne '') {
        $stat_country{'<Unsupported IPv6>'}++;
    } else {
        $stat_country{'<No IP adress>'}++;
    }
    my $respcode = $data{'CODE'};
    $stat_httpcode{"HTTP $respcode"}++;
    my $bytes = int($data{'BYTES'});
    $totalkb += 1 + ($bytes >> 10);
    my $backendtime = 0.0;
    if ($data{'BACKEND'} eq '-' and $data{'CACHE'} eq '-') {
        $stat_source{'File'}++;
    } elsif ($data{'BACKEND'} ne '-') {
        $stat_source{'Backend'}++;
        $backendtime = 0.0 + $data{'BACKEND'};
    } else {
        $stat_source{'Cache'}++;
    }
    $totaltime += $backendtime;
    $prcstime{$backendtime}++;
    $stat_httpmethod{$data{'METHOD'}}++;
    $stat_httpversion{$data{'HTTP'} || '<blank>'}++;
    $stat_useragent{$data{'BROWSER'}}++;
    my $referer = $data{'REFERRER'};
    my $url = $data{'PATH'};
    if ($respcode =~ /^[23]0[0-9]$/) {
        $stat_top_count{$host.$url}++;
        $stat_top_time{$host.$url} += $backendtime;
        $stat_top_download{$host.$url} += ($bytes >> 10) + 1;
        $stat_host_time{$host} += $backendtime;
        $stat_host_download{$host} += ($bytes >> 10) + 1;
    } else {
        $stat_errortype{"$respcode ".normalize_error_msg($respcode, $host, $url)}++;
    }
}

# Processes an HTTP log file
sub process_file {
    my ($filename) = @_;
    if ($filename ne "-" and !(-f $filename and -r $filename)) {
        die "ERROR: cannot read file: $filename";
    }
    my $fh;
    if ($filename =~ /\.bz2$/) {
        open($fh, "-|", "bzcat $filename") or die $!;
    } elsif ($filename =~ /\.gz$/) {
        open($fh, "-|", "zcat $filename") or die $!;
    } elsif ($filename =~ /\.lzma$/) {
        open($fh, "-|", "lzcat $filename") or die $!;
    } elsif ($filename =~ /\.xz$/) {
        open($fh, "-|", "xzcat $filename") or die $!;
    } else {
        open($fh, "<$filename") or die $!;
    }
    $parser->Reset();
    while (<$fh>) {
        process_line($_);
    }
    close($fh);
}

# Processes the config file
sub process_config {
    my ($filename) = @_;
    my $fh;
    open($fh, "<$filename") or die $!;
    while (<$fh>) {
        s/^\s*(.*?)\s*$/$1/;
        my ($glob, $msg) = split(/\s+/, $_, 2);
        my $re = Text::Glob::glob_to_regex($glob);
        my @arr = ($re, $msg);
        push(@conf_errors, \@arr);
    }
    close($fh);
}

# Read config file
my $config_file = "/etc/simple-www-stats.conf";
if (-f $config_file) {
    process_config($config_file);
} elsif (-f dirname($0) . "/..$config_file") {
    process_config(dirname($0) . "/..$config_file");
} else {
    die "ERROR: missing config file $config_file";
}

# Process command-line arguments
my $output_json;
my $output_text;
my @filenames;
while (my $arg = shift @ARGV) {
    if ($arg eq '--json') {
        $output_json = shift @ARGV;
    } elsif ($arg eq '--text') {
        $output_text = shift @ARGV;
    } else {
        push(@filenames, $arg);
        process_file($arg);
    }
}
if (!@filenames) {
    die "ERROR: no access log file specified";
}

# Format time-of-day keys
foreach my $key (sort keys %timeofday) {
    my $count = $timeofday{$key};
    my $timekey = sprintf("%02d:00-%02d:59", int($key) * 3, int($key) * 3 + 2);
    $stat_timeofday{$timekey} = $count;
}

# Calculate processing time thresholds
my @limits = (0.500, 0.750, 0.900, 0.950, 0.975, 0.990, 0.995, 0.998, 0.999, 1.0);
my $nextlimit = shift(@limits);
my $count = 0;
foreach my $time (sort {$a <=> $b} keys %prcstime) {
    $count += $prcstime{$time};
    if ($count / $total >= $nextlimit) {
        $stat_prcstime{$nextlimit} = $time;
        $nextlimit = shift(@limits);
    }
}

# Print output
if (defined($output_json)) {
    my $fh;
    open($fh, '>'.$output_json) or die "ERROR: Couldn't write to ".$output_json;
    printf $fh "\{\n";
    my %json_total = ( 'count' => $total, 'kb' => $totalkb, 'size' => format_kb($totalkb));
    printf $fh qq#  "total": %s,\n#, encode_json(\%json_total);
    printf $fh qq#  "error_type": %s,\n#, encode_json(\%stat_errortype);
    printf $fh qq#  "hostname": %s,\n#, encode_json(\%stat_host);
    printf $fh qq#  "country": %s,\n#, encode_json(\%stat_country);
    printf $fh qq#  "backend_time": %s,\n#, encode_json(\%stat_prcstime);
    printf $fh qq#  "time_of_day": %s,\n#, encode_json(\%stat_timeofday);
    printf $fh qq#  "data_source": %s,\n#, encode_json(\%stat_source);
    printf $fh qq#  "http_method": %s,\n#, encode_json(\%stat_httpmethod);
    printf $fh qq#  "http_version": %s,\n#, encode_json(\%stat_httpversion);
    printf $fh qq#  "http_code": %s,\n#, encode_json(\%stat_httpcode);
    printf $fh qq#  "user_agent": %s,\n#, encode_json(\%stat_useragent);
    printf $fh "\}\n";
    close($fh);
}
if (!defined($output_json) or defined($output_text)) {
    my $fh;
    if (defined($output_text)) {
        open($fh, '>'.$output_text) or die "ERROR: Couldn't write to ".$output_text;
    } else {
        $fh = *STDOUT;
    }
    print $fh "Top Request Count:\n";
    print_histogram($fh, \%stat_top_count, 71, 20);
    print $fh "Top Download Size:\n";
    print_histogram_kb($fh, \%stat_top_download, 68, 20);
    print $fh "Top Backend Time:\n";
    print_histogram_time($fh, \%stat_top_time, 68, 20);
    print $fh "Errors:\n";
    print_histogram($fh, \%stat_errortype, 71);
    print $fh "Hostnames:\n";
    print_histogram($fh, \%stat_host, 35);
    print $fh "Top Hostname Download Sizes:\n";
    print_histogram_kb($fh, \%stat_host_download, 35, 20);
    print $fh "Top Hostname Backend Time:\n";
    print_histogram_time($fh, \%stat_host_time, 35, 20);
    print $fh "Countries:\n";
    print_histogram($fh, \%stat_country, 35);
    print $fh "Backend Time Distribution:\n";
    foreach my $key (sort keys %stat_prcstime) {
        printf $fh "  %5.1f%% within: %8s seconds\n", $key * 100.0, $stat_prcstime{$key};
    }
    print $fh "Time of Day Distribution:\n";
    foreach my $key (sort keys %stat_timeofday) {
        my $count = $stat_timeofday{$key};
        printf $fh "  %-15s %7d (%4.1f%%) requests\n", $key.':', $count, $count * 100.0 / $total;
    }
    print $fh "Data Sources:\n";
    print_histogram($fh, \%stat_source);
    print $fh "Request Methods:\n";
    print_histogram($fh, \%stat_httpmethod);
    print $fh "Request Versions:\n";
    print_histogram($fh, \%stat_httpversion);
    print $fh "Response Codes:\n";
    print_histogram($fh, \%stat_httpcode);
    print $fh "User Agents:\n";
    print_histogram($fh, \%stat_useragent);
    printf $fh "Total:\n";
    printf $fh "  %7d requests\n", $total;
    printf $fh "  %10s downloaded data\n", format_kb($totalkb);
    printf $fh "  %11s backend time\n", format_secs($totaltime);
    close($fh);
}
