#!/usr/bin/env bash
#
# Performs a MySQL dump of configured databases.
#
# Syntax: simple-backup-mysql [options]
#
# Options:
#   -v, --verbose    Print verbose output.
#
# Files:
#   /etc/simple-backup-mysql.conf
#

# Configuration variables
PROCID="simple-backup-mysql[$$]"
CONFIG=/etc/simple-backup-mysql.conf
LOCALDIR=`dirname $0`/..
HOST=`hostname`
DATE=`date '+%Y-%m-%d'`
TEMP_DIR=/tmp/$$
DUMP_DIR=/backup/$HOST/mysql
OPTIONS="--opt --quote-names --skip-add-locks --skip-lock-tables"
VERBOSE=false

# Set caution flags
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

# Function for logging an error to stderr and exiting
fail() {
    echo "ERROR:" "$@" >&2
    logger -p local0.error -t "$PROCID" "$@" || true
    exit 1
}

# Function for logging information in verbose mode
log() {
    $VERBOSE && echo `date +"%F %T"`: "$@" || true
    logger -p local0.info -t "$PROCID" "$@" || true
}

# Function for printing command-line usage info
usage() {
    echo "Performs a MySQL dump of configured databases."
    echo
    echo "Syntax: simple-backup-mysql [options]"
    echo
    echo "Options:"
    echo "  -v, --verbose    Print verbose output."
    exit 1
}

# Parse command-line arguments
while [ $# -gt 0 ] ; do
    case "$1" in
    "-v"|"--verbose")
        VERBOSE=true
        shift
        ;;
    "-?"|"-h"|"--help")
        usage
        ;;
    *)
        fail "invalid command-line argument: $1"
        ;;
    esac
done

# Load config to stdin
if [ -f $CONFIG ] ; then
    exec < $CONFIG
elif [ -f $LOCALDIR/$CONFIG ] ; then
    exec < $LOCALDIR/$CONFIG
else
    fail "missing config file $CONFIG"
fi

# Adjust mysqldump options
if $VERBOSE ; then
    OPTIONS="$OPTIONS -v"
fi

# Perform MySQL backup
log "init MySQL backup on $HOST"
mkdir -p $TEMP_DIR
while read DATABASE USER PWD EXTRAS ; do
    [ "$DATABASE" != "" -a "${DATABASE:0:1}" != "#" ] || continue
    log "starting MySQL dump of $DATABASE"
    FILE=$TEMP_DIR/$DATABASE.$DATE.sql
    mysqldump -u$USER -p$PWD $OPTIONS $EXTRAS --result-file=$FILE --databases $DATABASE
    log "finished MySQL dump of $DATABASE"
done

# Package and compress backups
FILE=databases.$DATE.tar
log "starting compression of file $FILE"
cd $TEMP_DIR
tar cf $FILE *.sql
xz $FILE
mkdir -p $DUMP_DIR
mv -f $FILE.* $DUMP_DIR/
cd
rm -rf $TEMP_DIR
log "finished compression of file $FILE"

# Remove outdated backup files
find $DUMP_DIR -type f -mtime +14 \! -name "*.????-??-01.*" -delete

# Finished backup
log "done MySQL backup on $HOST"
