#!/usr/bin/env bash
#
# Performs a remote file sync for configured directories.
#
# Syntax: simple-backup-sync [options]
#
# Options:
#   -v, --verbose    Print verbose output.
#
# Files:
#   /etc/simple-backup-sync.conf
#

# Configuration variables
PROCID="simple-backup-sync[$$]"
CONFIG=/etc/simple-backup-sync.conf
LOCALDIR=`dirname $0`/..
HOST=`hostname`
OPTIONS="--archive --hard-links --delete --compress"
VERBOSE=false

# Set caution flags
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

# Function for logging an error to stderr and exiting
fail() {
    echo "ERROR:" "$@" >&2
    logger -p local0.error -t "$PROCID" "$@" || true
    exit 1
}

# Function for logging information in verbose mode
log() {
    $VERBOSE && echo `date +"%F %T"`: "$@" || true
    logger -p local0.info -t "$PROCID" "$@" || true
}

# Function for printing command-line usage info
usage() {
    echo "Syntax: simple-backup-sync [options]"
    echo
    echo "Options:"
    echo "  -v, --verbose    Print verbose output."
    exit 1
}

# Parse command-line arguments
while [ $# -gt 0 ] ; do
    case "$1" in
    "-v"|"--verbose")
        VERBOSE=true
        shift
        ;;
    "-?"|"-h"|"--help")
        usage
        ;;
    *)
        fail "invalid command-line argument: $1"
        ;;
    esac
done

# Load config to stdin
if [ -f $CONFIG ] ; then
    exec < $CONFIG
elif [ -f $LOCALDIR/$CONFIG ] ; then
    exec < $LOCALDIR/$CONFIG
else
    fail "missing config file $CONFIG"
fi

# Adjust rsync options
if $VERBOSE ; then
    OPTIONS="$OPTIONS --verbose"
else
    OPTIONS="$OPTIONS --quiet"
fi

# Perform synchronization
log "init backup sync from $HOST"
while read SRC DST EXTRAS ; do
    [ "$SRC" != "" -a "${SRC:0:1}" != "#" ] || continue
    log "syncing from: $SRC"
    log "          to: $DST"
    rsync $OPTIONS $EXTRAS $SRC $DST
done
log "done backup sync from $HOST"
