#!/usr/bin/env bash
#
# Performs a filesystem backup for configured directories.
#
# Syntax: simple-backup-files [-v]
#
# Options:
#   -v  Print verbose output.
#
# Files:
#   /etc/simple-backup-files.conf
#

# Global variables
PROCID="simple-backup-files[$$]"
CONFIG=simple-backup-files.conf
LOCALDIR=`dirname $0`/..
HOST=`hostname`
DATE_MONTH=`date '+%Y-%m'`
DATE_DAY=`date '+%Y-%m-%d'`
DATE_MINUTE=`date '+%Y-%m-%d-%H%M'`
BACKUP_BASE_DIR=/backup/$HOST/files
BACKUP_LATEST_DIR=$BACKUP_BASE_DIR/latest
BACKUP_MONTH_DIR=$BACKUP_BASE_DIR/$DATE_MONTH
BACKUP_DAY_DIR=$BACKUP_BASE_DIR/$DATE_DAY
BACKUP_MINUTE_DIR=$BACKUP_BASE_DIR/$DATE_MINUTE
TEMP_LIST=/tmp/$$.simple-backup-files.lst
OPTIONS="--archive --delete --checksum"
VERBOSE=false

# Set caution flags
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

# Function for logging an error to stderr and exiting
fail() {
    echo "ERROR:" "$@" >&2
    logger -p local0.error -t "$PROCID" "$@" || true
    exit 1
}

# Function for logging information in verbose mode
log() {
    $VERBOSE && echo `date +"%F %T"`: "$@" || true
    logger -p local0.info -t "$PROCID" "$@" || true
}

# Check for root user
[ `whoami` == 'root' ] || fail "only root is allowed to run simple-backup-files"

# Load config to stdin
if [ -f /etc/$CONFIG ] ; then
    exec < /etc/$CONFIG
elif [ -f $LOCALDIR/etc/$CONFIG ] ; then
    exec < $LOCALDIR/etc/$CONFIG
else
    fail "missing config file /etc/$CONFIG"
fi

# Parse command-line arguments
if [ "${1:-}" == "-v" ] ; then
    shift
    VERBOSE=true
    OPTIONS="$OPTIONS --verbose"
else
    OPTIONS="$OPTIONS --quiet"
fi

# Create include/exclude list
echo "-C" > $TEMP_LIST
while read RULE SRC EXPIRES ; do
    [ "$RULE" != "" -a "${RULE:0:1}" != "#" ] || continue
    if [ "${RULE:0:1}" == "/" ] ; then
        EXPIRES=$SRC
        SRC=$RULE
        RULE="+"
    fi
    echo "$RULE $SRC/***" >> $TEMP_LIST
    if [ $RULE == "+" ] ; then
        PARENT=$SRC
        while PARENT=`dirname $PARENT` && [ $PARENT != "/" ] ; do
            echo "+ $PARENT/" >> $TEMP_LIST
        done
    fi
    if [ "$EXPIRES" != "" ] ; then
        log "removing $SRC backups older than $EXPIRES days"
        find $BACKUP_BASE_DIR/????-*$SRC -maxdepth 0 -type d -mtime +$EXPIRES -exec rm -rf {} \; 2> /dev/null || true
    fi
done
echo "- *" >> $TEMP_LIST

# Perform backup
log "init backup to $BACKUP_BASE_DIR"
mkdir -p $BACKUP_LATEST_DIR $BACKUP_MONTH_DIR $BACKUP_DAY_DIR $BACKUP_MINUTE_DIR
touch $BACKUP_LATEST_DIR
rsync $OPTIONS --backup --backup-dir=$BACKUP_MINUTE_DIR --include-from=$TEMP_LIST / $BACKUP_LATEST_DIR/
rm -f $TEMP_LIST

# Remove empty dirs & update daily and montly dirs
rmdir $BACKUP_MINUTE_DIR 2> /dev/null || true
if [ -d $BACKUP_MINUTE_DIR ] ; then
    log updating daily and monthly diff dirs
    rsync --archive --ignore-existing --quiet $BACKUP_MINUTE_DIR/ $BACKUP_DAY_DIR/
    rsync --archive --ignore-existing --quiet $BACKUP_MINUTE_DIR/ $BACKUP_MONTH_DIR/
fi

# Remove outdated backup dirs
find $BACKUP_BASE_DIR -maxdepth 1 -type d -name "????-??-??-????" -mtime +1 -exec rm -rf {} \;
find $BACKUP_BASE_DIR -maxdepth 1 -type d -name "????-??-??" -mtime +14 -exec rm -rf {} \;

# Finished backup
log "done backup to $BACKUP_BASE_DIR"
