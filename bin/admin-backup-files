#!/usr/bin/env bash
#
# Performs a filesystem backup for configured directories.
#
# Syntax: admin-backup-files [-v]
#
# Options:
#   -v  Print verbose output.
#
# Files:
#   /etc/admin-backup-files.conf
#

# Configuration variables
CONFIG=/etc/admin-backup-files.conf
LOCALDIR=`dirname $0`/..
HOST=`hostname`
BACKUP_BASE_DIR=/backup/$HOST/files
BACKUP_LATEST_DIR=$BACKUP_BASE_DIR/latest
OPTIONS="--archive --one-file-system --quiet"
DATE_MONTH=`date '+%Y-%m'`
DATE_DAY=`date '+%Y-%m-%d'`
DATE_MINUTE=`date '+%Y-%m-%d-%H%M'`
VERBOSE="false"

# Set caution flags
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

# Function for logging an error to stderr and exiting
fail() {
    echo "ERROR:" "$*" >&2
    exit 1
}

# Function for logging information in verbose mode
log() {
    [ "$VERBOSE" == "true" ] && echo `date +"%F %T"`: "$*" || true
}

# Check for root user
[ `whoami` == 'root' ] || fail "only root is allowed to run admin-backup-files"

# Load config to stdin
if [ -f $CONFIG ] ; then
    exec < $CONFIG
elif [ -f $LOCALDIR/$CONFIG ] ; then
    exec < $LOCALDIR/$CONFIG
else
    fail "missing config file $CONFIG"
fi

# Parse command-line arguments
if [ "${1:-}" == "-v" ] ; then
    shift
    VERBOSE=true
fi

# Create backup dir
if [ ! -d $BACKUP_BASE_DIR/$DATE_MONTH ] ; then
    NAME=$DATE_MONTH
elif [ ! -d $BACKUP_BASE_DIR/$DATE_DAY ] ; then
    NAME=$DATE_DAY
else
    NAME=$DATE_MINUTE
fi
BACKUP_CURRENT_DIR=$BACKUP_BASE_DIR/$NAME

# Perform backup
log "init backup to $BACKUP_CURRENT_DIR"
mkdir -p $BACKUP_CURRENT_DIR
while read SRC EXPIRES ; do
    [ "$SRC" != "" -a "${SRC:0:1}" != "#" ] || continue
    log "syncing dir $SRC"
    DST=$BACKUP_CURRENT_DIR$SRC
    LNK=$BACKUP_LATEST_DIR$SRC
    mkdir -p $DST
    if [ -d $LNK ] ; then
        RSYNC_OPTS="$OPTIONS --link-dest=$LNK/"
    else
        RSYNC_OPTS="$OPTIONS"
    fi
    rsync $RSYNC_OPTS $SRC/ $DST/
    touch $DST
    if [ "$EXPIRES" != "" ] ; then
        log "removing $SRC backups older than $EXPIRES days"
        find $BACKUP_BASE_DIR/????-*$SRC -maxdepth 0 -type d -mtime +$EXPIRES -exec rm -rf {} \;
    fi
done

# Change latest backup dir
rm -f $BACKUP_LATEST_DIR
cd $BACKUP_BASE_DIR ; ln -s `basename $BACKUP_CURRENT_DIR` `basename $BACKUP_LATEST_DIR`

# Remove outdated backup dirs
find $BACKUP_BASE_DIR -maxdepth 1 -type d -name "????-??-??-????" -mtime +1 -exec rm -rf {} \;
find $BACKUP_BASE_DIR -maxdepth 1 -type d -name "????-??-??" -mtime +30 -exec rm -rf {} \;

# Finished backup
/usr/local/bin/simple-freemem
log "done backup to $BACKUP_CURRENT_DIR"
