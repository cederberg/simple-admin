#!/usr/bin/env bash
#
# Rotates HTTP access log files.
#
# Syntax: simple-www-logrotate [options]
#
# Options:
#   -v, --verbose    Print verbose output.
#
# Files:
#   /etc/simple-www-logrotate.conf
#

# Configuration variables
PROCID="simple-www-logrotate[$$]"
CONFIG=/etc/simple-www-logrotate.conf
LOCALDIR=`dirname $0`/..
VERBOSE=false

# Set caution flags
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

# Function for logging an error to stderr and exiting
fail() {
    echo "ERROR:" "$@" >&2
    logger -p local0.error -t "$PROCID" "$@" || true
    exit 1
}

# Function for printing command-line usage info
usage() {
    echo "Rotates HTTP access log files."
    echo
    echo "Syntax: simple-www-logrotate [options]"
    echo
    echo "Options:"
    echo "  -v, --verbose    Print verbose output."
    exit 1
}

# Function for logging information in verbose mode
log() {
    $VERBOSE && echo `date +"%F %T"`: "$@" || true
    logger -p local0.info -t "$PROCID" "$@" || true
}

# Parse command-line arguments
while [ $# -gt 0 ] ; do
    case "$1" in
    "-v"|"--verbose")
        VERBOSE=true
        shift
        ;;
    "-?"|"-h"|"--help")
        usage
        ;;
    *)
        fail "invalid command-line argument: $1"
        ;;
    esac
done

# Load config (shell)
if [ -f $CONFIG ] ; then
    . $CONFIG
elif [ -f $LOCALDIR/$CONFIG ] ; then
    . $LOCALDIR/$CONFIG
else
    fail "missing config file $CONFIG"
fi

# Check for root user
[ `whoami` == 'root' ] || fail "only root is allowed to run simple-www-logrotate"

# Rename log files
YESTERDAY=`date -d "-1 day" +%Y%m%d`
FILES=`find $LOG_DIR -name '*.log'`
for LOG in $FILES ; do
    if [ -e $LOG.$YESTERDAY -o -e $LOG.$YESTERDAY.xz ] ; then
        log "skipping $LOG (already rotated)"
    else
        log "rotating $LOG"
        mv $LOG $LOG.$YESTERDAY
    fi
done

# Restart Nginx to create new logs
log "running $COMMAND"
$COMMAND
log "sleeping 60 seconds"
sleep 60

# Compress rotated log files
for LOG in $FILES ; do
    if [ -s $LOG.$YESTERDAY ] ; then
        log "compressing $LOG.$YESTERDAY"
        xz $LOG.$YESTERDAY
    elif [ -e $LOG.$YESTERDAY ] ; then
        log "removing empty file $LOG.$YESTERDAY"
        rm -f $LOG.$YESTERDAY
    fi
done

# Remove old log files
log "removing old log files"
find $LOG_DIR -name '*.lzma' -mtime +$LOG_EXPIRES -exec rm -rf {} \;
find $LOG_DIR -name '*.xz' -mtime +$LOG_EXPIRES -exec rm -rf {} \;

# Process web statistics
LOG_FILES=`find $LOG_DIR -name "access.log.$YESTERDAY.xz"`
if [ -d $STAT_DIR -a "$LOG_FILES" != "" ] ; then
    JSON_FILE=$STAT_DIR/logstats.$YESTERDAY.json
    TEXT_FILE=$STAT_DIR/logstats.$YESTERDAY.txt
    log "processing stats to $STAT_DIR"
    /usr/local/bin/simple-www-stats --json $JSON_FILE --text $TEXT_FILE $LOG_FILES
    gzip $JSON_FILE $TEXT_FILE
fi
